generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  
  url      = env("DATABASE_URL")
}
model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  firstName String
  lastName  String 
  bookings  Booking[]  
  clerkId   String?     
  payments  Payment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Bus {
  id        Int        @id @default(autoincrement())
  busNumber String     @unique
  capacity  Int         
  routeId   Int        
  route     Route      @relation(fields: [routeId], references: [id])

  seats     Seat[]     // A bus has many seats
  bookings  Booking[]  
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  price     Float
}

model Route {
  id         Int        @id @default(autoincrement())
  startPoint String
  endPoint   String
  buses      Bus[] 

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Booking {
  id          Int        @id @default(autoincrement())
  userId      Int         
  busId       Int         
  bookingDate DateTime    
  status      BookingStatus  
  seatsBooked Int         
  
  user        User       @relation(fields: [userId], references: [id])
  bus         Bus        @relation(fields: [busId], references: [id])
  // ticket      Ticket?    
  paymentId  Int?
  payment    Payment?   @relation(fields: [paymentId], references: [id]) 
  
  ticketCode String?
  seatNumber Seat[]  

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
  
model Payment {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User?       @relation(fields: [userId], references: [id])

  // bookingId   Int        @unique
  paymentDate DateTime   @default(now())
  amount      Float       
  status      PaymentStatus
  // booking     Booking?    @relation(fields: [bookingId], references: [id])

  booking     Booking[]
  razorpay_order_id String
  razorpay_payment_id String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
 
model Seat {
  id        Int    @id @default(autoincrement())
  seatNumber String  
  busId     Int
  bus       Bus    @relation(fields: [busId], references: [id])
  isBooked  Boolean @default(false) 

  bookingId Int?
  Booking  Booking? @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  PENDING
}

enum PaymentStatus {
  PAID
  FAILED
  PENDING
}
